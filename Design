Design:

A node is decomposed into two main parts:

1. A event loop dispatcher, which parses the incoming events and then dispatches the events to event handlers
2. Event handlers, which are implemented by specific "state functions"
3. The "state functions" are either a follower, candidate or a leader


Events:
1. Start
2. Stop
3. Append Entry
4. Got Vote
5. Got Vote Request
6. Got Rejected Vote
7. Election signal
8. Heartbeat signal

A "node" implements requisite "contract" to interact with the outside world. It also contains the timers that signal either a heartbeat or
an election.

It holds the "state" that is set by the "state functions". The node itself should NOT manipulate state in anyway.

"Node" contract:
Id
Start
Stop
Append Entry
Got Vote
Got Vote Request
Got Rejected Vote

Unit Testing:
Unit testing uses a simple dispatcher to test how the node reacts to various events and the state transitions

Verification:
When initialized:
- Sets commitIndex to 0
- Sets lastApplied to 0
- Starts as a follower
- Sets the currentTerm from persistent storage
  - zero if null (on first boot)
- Sets the votedFor from persistent storage
  - null if empty
- Start listening to events by starting the dispatcher
- Start as a follower, then:
  - Start the election timer

When receives election timeout:
- As a follower:
    Increment the current term
    Transition to a candidate
- As a Candidate:
  - Paper: Each candidate restarts its randomized election timeout at the start of an election, and it waits for that
    timeout to elapse before starting the next election;
  - Should we just restart the election timer and then transition to a follower?
  - Decision: Transition to a follower; the follower starts the election timer
  - Also: Paper: When this happens, each candidate will time out and start a new election by incrementing its term and
    initiating another round of Request-Vote RPCs.
- As a Leader:
  - TO DO!!!!

When initialized as a candidate:
  - The term would have incremented by the follower
  - Vote for self
  - Begin election timer
  - Start requesting for vote from peers
  - while waiting for vote reply - could get:
      - A request for vote from another candidate
          - If the current term is same or less - then reject, greater than transition to a follower
      - An append entry from a leader
        - If the current term is same or less - then reject, greater than transition to a follower
      - In summary current term is greater than transition to a follower
